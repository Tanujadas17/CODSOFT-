# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNPhJFkOyzxIo2JsrVITefFWw6HIKOVE
"""

# @title Default title text
import pandas as pd

# Create movies DataFrame
movies_data = {
    'movieId': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'title': [
        'Toy Story (1995)', 'Jumanji (1995)', 'Grumpier Old Men (1995)', 'Waiting to Exhale (1995)',
        'Father of the Bride Part II (1995)', 'Heat (1995)', 'Sabrina (1995)', 'Tom and Huck (1995)',
        'Sudden Death (1995)', 'GoldenEye (1995)'
    ],
    'genres': [
        'Adventure|Animation|Children|Comedy|Fantasy', 'Adventure|Children|Fantasy', 'Comedy|Romance',
        'Comedy|Drama|Romance', 'Comedy', 'Action|Crime|Thriller', 'Comedy|Romance',
        'Adventure|Children', 'Action', 'Action|Adventure|Thriller'
    ]
}
movies_df = pd.DataFrame(movies_data)

# Create ratings DataFrame
ratings_data = {
    'userId': [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5],
    'movieId': [1, 3, 6, 7, 1, 2, 5, 7, 8, 1, 2, 4, 6, 8, 1, 3, 6, 7, 9, 1, 2, 5, 7, 10],
    'rating': [4.0, 4.5, 3.0, 5.0, 3.5, 4.0, 2.0, 3.5, 4.0, 2.5, 3.5, 4.0, 5.0, 3.0, 4.0, 4.0, 2.0, 3.0, 4.5, 5.0, 3.5, 3.0, 4.5, 4.0]
}
ratings_df = pd.DataFrame(ratings_data)

# Save to CSV files
movies_df.to_csv('movies.csv', index=False)
ratings_df.to_csv('ratings.csv', index=False)

"""# New section

# New section
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Load the MovieLens dataset
movies = pd.read_csv('movies.csv')  # Contains movieId, title, genres
ratings = pd.read_csv('ratings.csv')  # Contains userId, movieId, rating

# Create a pivot table with users as rows, movies as columns, and ratings as values
user_movie_ratings = ratings.pivot(index='userId', columns='movieId', values='rating').fillna(0)
print("User-Movie Ratings Pivot Table:")
print(user_movie_ratings)

# Compute the cosine similarity between users
user_similarity = cosine_similarity(user_movie_ratings)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_ratings.index, columns=user_movie_ratings.index)
print("User Similarity Matrix:")
print(user_similarity_df)

def recommend_movies(user_id, num_recommendations=5):
    # Get the similarity scores for the given user
    similarity_scores = user_similarity_df[user_id]
    print(f"Similarity Scores for User {user_id}:")
    print(similarity_scores)

    # Get the user's ratings
    user_ratings = user_movie_ratings.loc[user_id]
    print(f"Ratings for User {user_id}:")
    print(user_ratings)

    # Compute the weighted sum of ratings for all movies based on similarity scores
    weighted_ratings = np.dot(user_similarity_df.loc[user_id], user_movie_ratings)
    print(f"Weighted Ratings for User {user_id}:")
    print(weighted_ratings)

    # Create a series with the weighted ratings
    weighted_ratings_series = pd.Series(weighted_ratings, index=user_movie_ratings.columns)
    print(f"Weighted Ratings Series for User {user_id}:")
    print(weighted_ratings_series)

    # Remove movies the user has already rated
    weighted_ratings_series[user_ratings[user_ratings > 0].index] = 0
    print(f"Filtered Weighted Ratings Series for User {user_id}:")
    print(weighted_ratings_series)

    # Get the top recommendations
    top_recommendations = weighted_ratings_series.nlargest(num_recommendations)
    print(f"Top Recommendations for User {user_id}:")
    print(top_recommendations)

    # Get the movie titles for the recommendations
    recommended_movie_titles = movies[movies['movieId'].isin(top_recommendations.index)]['title']

    return recommended_movie_titles

# Example usage
user_id = 1  # Change this to the user ID for whom you want recommendations
recommended_movies = recommend_movies(user_id,num_recommendations=5)
print("Recommended Movies for User", user_id)
print(recommended_movies)

